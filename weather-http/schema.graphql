schema {
  query: SensorReadoutQuery
  mutation: SensorReadoutMutation
  subscription: SensorReadoutSubscription
}

type CreateReadout {
  readout: SensorReadout
  ok: Boolean
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type SensorReadout implements Node {
  createdAt: DateTime!
  kind: String!
  value: Float!

  """The ID of the object."""
  id: ID!
}

type SensorReadoutConnection {
  pageInfo: PageInfo!
  edges: [SensorReadoutEdge]!
}

type SensorReadoutEdge {
  """The item at the end of the edge"""
  node: SensorReadout

  """A cursor for use in pagination"""
  cursor: String!
}

type SensorReadoutMutation {
  createReadout(kind: String!, timestamp: DateTime, value: Float!): CreateReadout
}

type SensorReadoutQuery {
  """The ID of the object"""
  node(id: ID!): Node
  allReadouts(before: String, after: String, first: Int, last: Int): SensorReadoutConnection
  allReadoutsOf(kind: String): [SensorReadout]
  allReadoutsOfBetween(kind: String, start: DateTime, end: DateTime): [SensorReadout]
  latestReadoutsOf(kind: String, before: String, after: String, first: Int, last: Int): SensorReadoutConnection
}

type SensorReadoutSubscription {
  readouts: SensorReadout
}

